diff --git a/CMakeLists.txt b/CMakeLists.txt
index c9b42813..b40f52c2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -42,34 +42,6 @@ if(MSVC OR CMAKE_C_SIMULATE_ID STREQUAL "MSVC")
   set(MSVC_LIKE 1)
 endif()
 
-# The libjpeg-turbo build system has never supported and will never support
-# being integrated into another build system using add_subdirectory(), because
-# doing so would require that we (minimally):
-#
-# 1. avoid using certain CMake variables, such as CMAKE_SOURCE_DIR,
-#    CMAKE_BINARY_DIR, and CMAKE_PROJECT_NAME;
-# 2. avoid using implicit include directories and relative paths;
-# 3. optionally provide a way to skip the installation of libjpeg-turbo
-#    components when the 'install' target is built;
-# 4. optionally provide a way to postfix target names, to avoid namespace
-#    conflicts;
-# 5. restructure the top-level CMakeLists.txt so that it properly sets the
-#    PROJECT_VERSION variable; and
-# 6. design automated regression tests to ensure that new commits don't break
-#    any of the above.
-#
-# Even if we did all of that, issues would still arise, because it is
-# impossible for an upstream build system to anticipate the widely varying
-# needs of every downstream build system.  That's why the CMake
-# ExternalProject_Add() function exists.  Downstream projects that wish to
-# integrate libjpeg-turbo as a subdirectory should either use
-# ExternalProject_Add() or make downstream modifications to the libjpeg-turbo
-# build system to suit their specific needs.  Please do not file bug reports,
-# feature requests, or pull requests regarding this.
-if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
-  message(FATAL_ERROR "The libjpeg-turbo build system cannot be integrated into another build system using add_subdirectory().  Use ExternalProject_Add() instead.")
-endif()
-
 # CMake 3.14 and later sets CMAKE_MACOSX_BUNDLE to TRUE by default when
 # CMAKE_SYSTEM_NAME is iOS, tvOS, or watchOS, which breaks the libjpeg-turbo
 # build.  (Specifically, when CMAKE_MACOSX_BUNDLE is TRUE, executables for
@@ -229,9 +201,9 @@ macro(boolean_number var)
   endif()
 endmacro()
 
-option(ENABLE_SHARED "Build shared libraries" TRUE)
+option(ENABLE_SHARED "Build shared libraries" FALSE)
 boolean_number(ENABLE_SHARED)
-option(ENABLE_STATIC "Build static libraries" TRUE)
+option(ENABLE_STATIC "Build static libraries" FALSE)
 boolean_number(ENABLE_STATIC)
 option(REQUIRE_SIMD
   "Generate a fatal error if SIMD extensions are not available for this platform (default is to fall back to a non-SIMD build)"
@@ -1988,132 +1960,21 @@ endif()
 
 endif() # WITH_TESTS
 
-
-###############################################################################
-# INSTALLATION
-###############################################################################
-
-set(EXE ${CMAKE_EXECUTABLE_SUFFIX})
-
-if(WITH_TURBOJPEG)
-  if(ENABLE_SHARED)
-    install(TARGETS turbojpeg EXPORT ${CMAKE_PROJECT_NAME}Targets
-      INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
-      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib
-      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib
-      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin)
-    if(WITH_TOOLS)
-      install(TARGETS tjbench
-        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin)
-    endif()
-    if(NOT CMAKE_VERSION VERSION_LESS "3.1" AND MSVC_LIKE AND
-      CMAKE_C_LINKER_SUPPORTS_PDB)
-      install(FILES "$<TARGET_PDB_FILE:turbojpeg>"
-        DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin OPTIONAL)
-    endif()
-  endif()
-  if(ENABLE_STATIC)
-    install(TARGETS turbojpeg-static EXPORT ${CMAKE_PROJECT_NAME}Targets
-      INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
-      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib)
-    if(NOT ENABLE_SHARED)
-      if(GENERATOR_IS_MULTI_CONFIG)
-        set(DIR "${CMAKE_CURRENT_BINARY_DIR}/\${CMAKE_INSTALL_CONFIG_NAME}")
-      else()
-        set(DIR ${CMAKE_CURRENT_BINARY_DIR})
-      endif()
-      if(WITH_TOOLS)
-        install(PROGRAMS ${DIR}/tjbench-static${EXE}
-          DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin
-          RENAME tjbench${EXE})
-      endif()
-    endif()
-  endif()
-  install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/turbojpeg.h
-    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT include)
-endif()
-
-if(ENABLE_STATIC)
-  install(TARGETS jpeg-static EXPORT ${CMAKE_PROJECT_NAME}Targets
-    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
-    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib)
-  if(NOT ENABLE_SHARED)
-    if(GENERATOR_IS_MULTI_CONFIG)
-      set(DIR "${CMAKE_CURRENT_BINARY_DIR}/\${CMAKE_INSTALL_CONFIG_NAME}")
-    else()
-      set(DIR ${CMAKE_CURRENT_BINARY_DIR})
-    endif()
-    if(WITH_TOOLS)
-      install(PROGRAMS ${DIR}/cjpeg-static${EXE}
-        DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin RENAME cjpeg${EXE})
-      install(PROGRAMS ${DIR}/djpeg-static${EXE}
-        DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin RENAME djpeg${EXE})
-      install(PROGRAMS ${DIR}/jpegtran-static${EXE}
-        DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin
-        RENAME jpegtran${EXE})
-    endif()
-  endif()
-endif()
-
-if(WITH_TOOLS)
-  install(TARGETS rdjpgcom wrjpgcom
-    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin)
-endif()
-
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/README.ijg
-  ${CMAKE_CURRENT_SOURCE_DIR}/README.md
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/example.c
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/tjcomp.c
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/tjdecomp.c
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/tjtran.c
-  ${CMAKE_CURRENT_SOURCE_DIR}/doc/libjpeg.txt
-  ${CMAKE_CURRENT_SOURCE_DIR}/doc/structure.txt
-  ${CMAKE_CURRENT_SOURCE_DIR}/doc/usage.txt
-  ${CMAKE_CURRENT_SOURCE_DIR}/doc/wizard.txt
-  ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.md DESTINATION ${CMAKE_INSTALL_DOCDIR}
-  COMPONENT doc)
-if(WITH_JAVA)
-  install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/java/TJComp.java
-    ${CMAKE_CURRENT_SOURCE_DIR}/java/TJDecomp.java
-    ${CMAKE_CURRENT_SOURCE_DIR}/java/TJTran.java
-    DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT doc)
-endif()
-
-if(UNIX OR MINGW)
-  if(WITH_TOOLS)
-    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/doc/cjpeg.1
-      ${CMAKE_CURRENT_SOURCE_DIR}/doc/djpeg.1
-      ${CMAKE_CURRENT_SOURCE_DIR}/doc/jpegtran.1
-      ${CMAKE_CURRENT_SOURCE_DIR}/doc/rdjpgcom.1
-      ${CMAKE_CURRENT_SOURCE_DIR}/doc/wrjpgcom.1
-      DESTINATION ${CMAKE_INSTALL_MANDIR}/man1 COMPONENT man)
-  endif()
-endif()
-install(FILES ${CMAKE_CURRENT_BINARY_DIR}/pkgscripts/libjpeg.pc
-  DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig COMPONENT lib)
-if(WITH_TURBOJPEG)
-  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/pkgscripts/libturbojpeg.pc
-    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig COMPONENT lib)
-endif()
-install(FILES
-  ${CMAKE_CURRENT_BINARY_DIR}/pkgscripts/${CMAKE_PROJECT_NAME}Config.cmake
-  ${CMAKE_CURRENT_BINARY_DIR}/pkgscripts/${CMAKE_PROJECT_NAME}ConfigVersion.cmake
-  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${CMAKE_PROJECT_NAME}
-  COMPONENT lib)
-install(EXPORT ${CMAKE_PROJECT_NAME}Targets
-  NAMESPACE ${CMAKE_PROJECT_NAME}::
-  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${CMAKE_PROJECT_NAME}
-  COMPONENT lib)
-
-install(FILES ${CMAKE_CURRENT_BINARY_DIR}/jconfig.h
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/jerror.h
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/jmorecfg.h
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/jpeglib.h
-  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT include)
-
-include(cmakescripts/BuildPackages.cmake)
-
-configure_file("${CMAKE_CURRENT_SOURCE_DIR}/cmakescripts/cmake_uninstall.cmake.in"
-  "cmake_uninstall.cmake" IMMEDIATE @ONLY)
-
-add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P cmake_uninstall.cmake)
+add_library(JpegCodecCoreObj OBJECT ${TURBOJPEG_SOURCES})
+if(TARGET simd)
+    add_library(JpegCodecSimdObj ALIAS simd)
+else()
+    add_library(JpegCodecSimdObj OBJECT)
+endif()
+
+target_include_directories(
+    JpegCodecCoreObj
+    PUBLIC
+    ${CMAKE_CURRENT_SOURCE_DIR}/src
+)
+target_compile_definitions(
+    JpegCodecCoreObj
+    PUBLIC
+    BMP_SUPPORTED
+    PPM_SUPPORTED
+)
\ No newline at end of file
